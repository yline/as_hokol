// 解构
class PersonModel {
    val name: String = "";
    val age: Int = 23;

    operator fun component1(): String {
        return name;
    }

    operator fun component2(): Int {
        return age;
    }
}

val (name, age) = PersonModel();

// List、Set、Map
val numberList = listOf(1, 2, 3); // 不可修改
val accountList = mutableListOf(1, 2, 3); // 可修改

val numberSet = setOf(1, 2, 3);
val accountSet = mutableSetOf<Int>(1, 2, 3);

val numberMap = mapOf("1" to 1, "2" to 2);
val accountMap = mutableMapOf<String, Int>("1" to 1, "2" to 2);

// 区间
for (i in 1..4) {
    // 1234
}

for (i in 4 downTo 1) {
    // 4321
}

for (i in 1..4 step 2) {
    // 13
}

for (i in 1 until 4) {
    // 123
}

// 类型校验
val obj: Any = "";
val isSame: Boolean = (obj is String);

// This
class A { // 隐式标签 @A
    inner class B { // 隐式标签 @B
        fun Int.foo() { // 隐式标签 @foo
            val a = this@A // A 的 this
            val b = this@B // B 的 this
            val c = this // foo() 的接收者，⼀个 Int
            val c1 = this@foo // foo() 的接收者，⼀个 Int
            val funLit = lambda@ fun String.() {
                val d = this // funLit 的接收者
            }
        }
    }
}

// 等号
1，引用相等（"===" --> 引用同一对象）
2，结构相等（"==" --> 值相等）

// 空安全
// 常用
val normalStr: String = "not null"; // 默认不允许字符为null
val nullStr: String? = null; // 允许字符为null
val length = nullStr?.length; // 不为null，才调用；如果为空，则返回null

// 空安全 问号校验
val lengthDefine = nullStr?.length ?: 0; // 不为null，才调用；如果为空，则返回默认值
val aInt: Int? = (obj as? Int); // 如果obj为int类型就赋值，否则返回null

// 空安全 集合
val nullableList: List<Int?> = listOf(1, 2, null, 4)
val intList: List<Int> = nullableList.filterNotNull() // 过滤空































